{"meta":{"title":"Huke8's Blog","subtitle":"每天都要保持战斗状态！","description":null,"author":"Huke8","url":"http://huke0814.github.io","root":"/"},"pages":[{"title":"about","date":"2019-09-22T01:52:55.000Z","updated":"2019-09-22T01:53:38.146Z","comments":true,"path":"about/index.html","permalink":"http://huke0814.github.io/about/index.html","excerpt":"","text":""},{"title":"contact","date":"2019-09-22T01:54:08.000Z","updated":"2019-09-22T01:54:50.691Z","comments":true,"path":"contact/index.html","permalink":"http://huke0814.github.io/contact/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-09-22T01:49:35.000Z","updated":"2019-09-22T01:50:41.886Z","comments":true,"path":"categories/index.html","permalink":"http://huke0814.github.io/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2019-09-22T01:55:57.000Z","updated":"2019-09-22T01:56:31.041Z","comments":true,"path":"friends/index.html","permalink":"http://huke0814.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-09-22T01:51:35.000Z","updated":"2019-09-22T01:52:24.396Z","comments":true,"path":"tags/index.html","permalink":"http://huke0814.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Git教程","slug":"Git教程","date":"2019-09-22T14:06:55.000Z","updated":"2019-09-22T14:09:14.173Z","comments":true,"path":"2019/09/22/git-jiao-cheng/","link":"","permalink":"http://huke0814.github.io/2019/09/22/git-jiao-cheng/","excerpt":"","text":"一、创建版本库 首先需要在合适的地方创建一个空目录：打开Git Bash，cd到要创建目录的路径，执行以下命令。 $ mkdir 目录名字 $ cd 目录名字 $ pwd /Users/michael/目录名字 pwd命令用于显示当前路径。切记各个目录名字都不要包含中文。 再把这个目录变成版本库 $ git init Initialized empty Git repository in /Users/michael/目录名字/.git/ 这样一个空的版本库就创建完成了。 下次要进入这个仓库时，先打开仓库的目录，在该目录下，右键选择Git Bash Here，就可以操作这个仓库了。 二、把文件添加到版本库 使用vi命令进入readme.txt文件，如果文件不存在将会创建。 $ vi readme.txt 这时界面进入到readme.txt文件中。 输入命令a后，就可以编辑文件了。（命令显示在窗口的最下面） 编辑完成后，按Esc键退出编辑，再输入命令: wq即可退出文件(或者大写ZZ即按住shift+zz)。 把文件添加到仓库中。 $ git add readme.txt 执行上面的命令，没有任何显示则说明添加成功了。 再把文件提交到仓库中。 $ git commit -m \"wrote a readme file\" [master (root-commit) eaadf4e] wrote a readme file 1 file changed, 2 insertions(+) create mode 100644 readme.txt -m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。 可以看出，添加文件到Git仓库，分两步： 使用命令git add &lt;file&gt;，注意，可反复多次使用，添加多个文件； 使用命令git commit -m &lt;message&gt;，完成。 三、时光穿梭 记录你修改文件的历史 1、修改文件 按照之前讲解的编辑readme.txt文件的步骤，对文件进行修改。 运行git status命令可以看结果： $ git status On branch master Changes not staged for commit: (use \"git add &lt;file>...\" to update what will be committed) (use \"git checkout -- &lt;file>...\" to discard changes in working directory) modified: readme.txt no changes added to commit (use \"git add\" and/or \"git commit -a\") 只告诉了我们readme.txt被修改过了，但是还没有被提交。 运行git diff命令可以看到具体修改了什么： $ git diff readme.txt diff --git a/readme.txt b/readme.txt index 46d49bf..9247db6 100644 --- a/readme.txt +++ b/readme.txt @@ -1,2 +1,2 @@ -Git is a version control system. +Git is a distributed version control system. Git is free software. -和+分别对应着修改前和修改后的内容，一目了然。 最后再运行git add &lt;file&gt;和git commit -m &lt;message&gt;命令，把你修改后的文件添加并提交到仓库中。 注意：任何时候你都可以运行git status命令来查看当前的状态，如果git status告诉你有文件被修改过，则可以用git diff查看修改内容。 2、版本退回","categories":[{"name":"software language","slug":"software-language","permalink":"http://huke0814.github.io/categories/software-language/"}],"tags":[{"name":"随记","slug":"随记","permalink":"http://huke0814.github.io/tags/随记/"}],"author":"huke8"},{"title":"my first","slug":"my-first","date":"2019-09-21T13:34:52.000Z","updated":"2019-09-22T07:26:55.126Z","comments":true,"path":"2019/09/21/my-first/","link":"","permalink":"http://huke0814.github.io/2019/09/21/my-first/","excerpt":"","text":"markdown教程一、标题# 一级标题 ## 二级标题 ### 三级标题 注意井号与标题之间有一个空格 按enter键可以退出各级操作的对齐，例如小黑点，数字序号，引用等 二、插入链接[链接名字](链接地址) 例如 ​ 百度 三、插入图片![]() 图片链接可以是本地的，也可以是网络上的，例如百度图片的链接，或者存在你的GitHub上的图片 括号内可以加图片标题。(即鼠标放在图片上可以显示内容) 图例 Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 标签。 四、文字引用&gt; 引用内容 &gt;&gt; 引用内容 &gt;&gt;&gt; 引用内容 一切皆有可能 一切皆有可能 一切皆有可能 一切皆有可能 一切皆有可能 一切皆有可能 五、段落格式1、粗体和斜体*斜体* **粗体** ***粗斜体*** 例如： 斜体 粗体 粗斜体 2、分割线*** * * * 3、删除线~~删除~~ 例如：删除 4、下划线 5、脚注master 6、列表 无序列表(* + -) - 第一项 - 第二项 有序列表(序号+.) 1. 第一项 2. 第二项 第一 第二 进入列表格式后，按Enter会延续列表格式，如果要退出该格式，则继续按一次Enter。 六、代码引用单行引用：`hello world` 多行引用： ```python 注意：`是键盘左上角的~键 加上语言名字后代码会高亮 例如： ​ 单行引用：各种编程语言都习惯用hello world作为用例。 ​ 多行引用： print('hello world') print(123456) 七、嵌入HTML 例如： 把网站的API嵌入 百度地图API：http://api.map.baidu.com/lbsapi/createmap/index.html 没有密钥搞不成 嵌入YouTube：找到视频地址，点击分享中的嵌入按钮，复制代码，在markdown文件中粘贴。 bilibili 八、表格 Markdown 制作表格使用 |来分隔不同的单元格，使用 - 来分隔表头和其他行. | 表头 | 表头 | | ---- | ---- | | 单元格 | 单元格 | | 单元格 | 单元格 | 表头 表头 单元格 单元格 单元格 单元格 九、插入数学公式当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$包裹TeX或LaTeX格式的数学公式来实现。如: $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\ \\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\ \\end{vmatrix} $$ 输出为： $$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix}\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}$$","categories":[{"name":"Software language","slug":"Software-language","permalink":"http://huke0814.github.io/categories/Software-language/"}],"tags":[{"name":"随记","slug":"随记","permalink":"http://huke0814.github.io/tags/随记/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-09-21T13:26:57.851Z","updated":"2019-09-22T13:42:37.190Z","comments":true,"path":"2019/09/21/hello-world/","link":"","permalink":"http://huke0814.github.io/2019/09/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Clean cached data$ hexo clean Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment 文章Front-matter介绍 配置选项 默认值 描述 title Markdown 的文件标题 文章标题，强烈建议填写此选项 date 文件创建时的日期时间 发布时间，强烈建议填写此选项，且最好保证全局唯一 author 根 _config.yml 中的 author 文章作者 img featureImages 中的某个值 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpg top true 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章 cover false v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中 coverImg 无 v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 password 无 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项 toc true 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项 mathjax false 是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行 summary 无 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories 无 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 tags 无 文章标签，一篇文章可以多个标签 More info:hexo-theme-matery","categories":[],"tags":[]}]}